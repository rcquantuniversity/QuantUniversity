"use strict";
var child_process = require('child_process');
var os = require('os');
var nodeify_ts_1 = require('nodeify-ts');
var cli_table_2_json_1 = require('cli-table-2-json');
var exec = child_process.exec;
var extractResult = function (result) {
    var extracterArray = [
        {
            re: / ls /,
            run: function (resultp) {
                var obj = JSON.parse(resultp.raw);
                var lines = obj.split(os.EOL);
                resultp.machineList = cli_table_2_json_1.cliTable2Json(lines);
                return resultp;
            },
        },
        {
            re: / config /,
            run: function (resultp) {
                var obj = JSON.parse(resultp.raw);
                var str = obj;
                var config = str.split(os.EOL).join(' ');
                var extractValue = function (strp, name, rep) {
                    var re = rep || new RegExp('--' + name + '="([\\S]*)"', 'i');
                    var m = re.exec(strp);
                    if (m !== null) {
                        if (m.index === re.lastIndex) {
                            re.lastIndex++;
                        }
                    }
                    return (m && m[1]) ? m[1] : null;
                };
                resultp.machine = {
                    config: config,
                    host: extractValue(str, null, /-H=tcp:\/\/(.*):/),
                    port: extractValue(str, null, /-H=tcp:\/\/.*:(\d*)/),
                    tlscacert: extractValue(str, 'tlscacert'),
                    tlscert: extractValue(str, 'tlscert'),
                    tlskey: extractValue(str, 'tlskey'),
                    tlsverify: function (strp) {
                        var re = /--tlsverify/;
                        var m = re.exec(strp);
                        if (m !== null) {
                            if (m.index === re.lastIndex) {
                                re.lastIndex++;
                            }
                        }
                        return (m && m[0] && m[0] === '--tlsverify') || false;
                    }(str),
                };
                return resultp;
            },
        },
        {
            re: / inspect /,
            run: function (resultp) {
                try {
                    var obj = JSON.parse(resultp.raw);
                    resultp.machine = JSON.parse(obj);
                }
                catch (e) {
                }
                return resultp;
            },
        },
    ];
    extracterArray.forEach(function (extracter) {
        var re = extracter.re;
        var str = result.command;
        var m = re.exec(str);
        if (m !== null) {
            if (m.index === re.lastIndex) {
                re.lastIndex++;
            }
            return extracter.run(result);
        }
    });
    return result;
};
var DockerMachine = (function () {
    function DockerMachine(options) {
        if (options === void 0) { options = new Options(); }
        this.options = options;
    }
    DockerMachine.prototype.command = function (command, callback) {
        var dockerMachine = this;
        var execCommand = 'docker-machine ' + command;
        var promise = Promise.resolve().then(function () {
            var params = dockerMachine.options.toParams();
            execCommand += ' ' + params;
            var execOptions = {
                cwd: dockerMachine.options.currentWorkingDirectory,
                env: {
                    DEBUG: '',
                    HOME: process.env.HOME,
                    PATH: process.env.PATH,
                },
                maxBuffer: 200 * 1024 * 1024,
            };
            return new Promise(function (resolve, reject) {
                exec(execCommand, execOptions, function (error, stdout, stderr) {
                    if (error) {
                        var message = "error: '" + error + "' stdout = '" + stdout + "' stderr = '" + stderr + "'";
                        console.error(message);
                        reject(message);
                    }
                    resolve(stdout);
                });
            });
        }).then(function (data) {
            var result = {
                command: execCommand,
                raw: JSON.stringify(data),
            };
            return extractResult(result);
        });
        return nodeify_ts_1.default(promise, callback);
    };
    return DockerMachine;
}());
exports.DockerMachine = DockerMachine;
var Options = (function () {
    function Options(keyValueObject, currentWorkingDirectory) {
        if (keyValueObject === void 0) { keyValueObject = {}; }
        if (currentWorkingDirectory === void 0) { currentWorkingDirectory = null; }
        this.keyValueObject = keyValueObject;
        this.currentWorkingDirectory = currentWorkingDirectory;
    }
    Options.prototype.toParams = function () {
        var _this = this;
        var result = Object.keys(this.keyValueObject).reduce(function (previous, key) {
            var value = _this.keyValueObject[key];
            return previous + " --" + key + " " + value;
        }, '');
        return result;
    };
    return Options;
}());
exports.Options = Options;
//# sourceMappingURL=index.js.map